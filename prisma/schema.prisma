generator client {
    provider      = "prisma-client-js"
    binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum UserType {
    ADMIN
    GUEST
}

model Organization {
    id         String   @id @default(uuid())
    name       String
    created_at DateTime @default(now())
    updated_at DateTime @updatedAt

    users User[]

    @@map("organizations")
}

model User {
    id              String       @id @default(uuid())
    name            String
    email           String       @unique
    password_hash   String
    type            UserType
    created_at      DateTime     @default(now())
    updated_at      DateTime     @updatedAt
    organization    Organization @relation(fields: [organization_id], references: [id])
    organization_id String

    Account              Account[]
    Category             Category[]
    Transaction          Transaction[]
    CreditCard           CreditCard[]
    RecurringTransaction RecurringTransaction[]

    @@map("users")
}

model Account {
    id          String    @id @default(uuid())
    name        String
    institution Int       @default(0)
    balance     Int       @default(0) // save in cents
    expense     Int       @default(0) // save in cents
    income      Int       @default(0) // save in cents
    created_at  DateTime  @default(now())
    updated_at  DateTime  @updatedAt
    deleted_at  DateTime?
    user_id     String

    user                 User                   @relation(fields: [user_id], references: [id])
    Transaction          Transaction[]
    CreditCard           CreditCard[]
    RecurringTransaction RecurringTransaction[]

    @@map("accounts")
}

model Category {
    id          String    @id @default(uuid())
    name        String
    description String?
    color       Int       @default(0)
    created_at  DateTime  @default(now())
    updated_at  DateTime  @updatedAt
    deleted_at  DateTime?
    user_id     String

    user                 User                   @relation(fields: [user_id], references: [id])
    Transaction          Transaction[]
    RecurringTransaction RecurringTransaction[]

    @@map("categories")
}

model Transaction {
    id          String    @id @default(uuid())
    title       String
    description String?
    amount      Int // save in cents
    type        Int       @default(0) // 0 = income, 1 = expense
    date        DateTime
    created_at  DateTime  @default(now())
    updated_at  DateTime  @updatedAt
    deleted_at  DateTime?
    account_id  String
    category_id String
    user_id     String

    account  Account  @relation(fields: [account_id], references: [id])
    category Category @relation(fields: [category_id], references: [id])
    user     User     @relation(fields: [user_id], references: [id])

    @@map("transactions")
}

model RecurringTransaction {
    id          String    @id @default(uuid())
    title       String
    description String?
    amount      Int // save in cents
    type        Int       @default(0) // 0 = income, 1 = expense
    start_date  DateTime
    end_date    DateTime?
    frequency   Int       @default(0) // 0 = weekly, 1 = monthly, 2 = yearly
    created_at  DateTime  @default(now())
    updated_at  DateTime  @updatedAt
    deleted_at  DateTime?

    account_id  String
    category_id String
    user_id     String

    account  Account  @relation(fields: [account_id], references: [id])
    category Category @relation(fields: [category_id], references: [id])
    user     User     @relation(fields: [user_id], references: [id])

    @@map("recurring_transactions")
}

model CreditCard {
    id         String    @id @default(uuid())
    name       String
    limit      Int       @default(0) // save in cents
    flag       Int       @default(0)
    closingDay Int
    dueDay     Int
    user_id    String
    account_id String
    created_at DateTime  @default(now())
    updated_at DateTime  @updatedAt
    deleted_at DateTime?

    user    User    @relation(fields: [user_id], references: [id])
    account Account @relation(fields: [account_id], references: [id])

    @@map("credit_cards")
}
